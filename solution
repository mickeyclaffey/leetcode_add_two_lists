/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {        
        ListNode* h1 = l1;
        ListNode* h2 = l2;
        ListNode* solution1 = new ListNode;
        solution1 = NULL;
        int countl1 = 0;
        int countl2 = 0;
        while (l1 != NULL) 
{ 
  ++countl1; 
  l1 = l1->next; 
}
        
        while (l2 != NULL) 
{ 
  ++countl2; 
  l2 = l2->next; 
}
        l1 = h1;
        l2 = h2;
        double sum1 = 0;
        for(int i = 0; i < countl1; i++){
            if(l1 != NULL){
             sum1 += l1->val*pow(10, i);
                l1 = l1->next;
            }
        }
        double sum2 = 0;
        for(int i = 0; i < countl2; i++){
            if(l2 != NULL){
              sum2 += l2->val*pow(10, i);
                l2 = l2->next;
            }
        }
        //cout<<sum1;
            double sum = sum1 + sum2;
            double num_digits = max(ceil(log10(sum + 1)), (double)1);
            double power = max(floor(log10(sum)), (double)0);  
            for(int i = 0; i < num_digits; i++){
                sum = sum1 + sum2;
                for(int j = 0; j < power - i; j++){
                    double subtraction = 0;
                    subtraction += floor(sum/pow(10, power - j))*pow(10, power - j);
                    sum -= subtraction;
                }
                sum = floor(sum/pow(10, i));  
                ListNode* temp = new ListNode;
                cout<<sum;
                temp->val = sum;
                temp->next = NULL;
                if(!solution1) {
        solution1 = temp;
    } else {
        ListNode* last = solution1;
        while(last->next) last=last->next;
            last->next = temp;
    }
            }
        return solution1;
    }
};
